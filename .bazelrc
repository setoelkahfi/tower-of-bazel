# Enable Bzlmod for every Bazel command
common --enable_bzlmod

# BuildBuddy
#build --bes_results_url=https://app.buildbuddy.io/invocation/
#build --bes_backend=grpcs://remote.buildbuddy.io
#build --nolegacy_important_outputs
#try-import ./auth.bazelrc

###############################
# Filesystem interactions     #
###############################

build --disk_cache=~/.bazel/cache
build --repository_cache=~/.bazel/repo_cache

build --symlink_prefix=dist/

build --nolegacy_external_runfiles
run   --nolegacy_external_runfiles
test  --nolegacy_external_runfiles

build --incompatible_strict_action_env
run   --incompatible_strict_action_env
test  --incompatible_strict_action_env

build --enable_runfiles
run   --enable_runfiles
test  --enable_runfiles

## BUILD apple

build --macos_minimum_os=13
build --host_macos_minimum_os=13

# https://bazel.build/reference/command-line-reference#flag--incompatible_strict_action_env
build --incompatible_strict_action_env

# Disable the worker, which has sandboxing disabled by default, which can hide
# issues with non-hermetic bugs.
build --spawn_strategy=sandboxed,local
build --worker_sandboxing=true

build --incompatible_disallow_empty_glob

build --features=swift.use_global_module_cache

# Enable indexing while building.
build --features swift.use_global_index_store
build --features swift.index_while_building

# Since there's no way to set the deployment version for swift_{binary,test},
# this forces all targets' minimum macOS to Github Actions macOS version.
build --macos_minimum_os=12.6

## TEST

# `bazel test` tries to build everything also by default, so skip that so the
# *_library targets in examples/... aren't built (and fail since they are
# platform specific).
test --build_tests_only

# Show detailed errors for test failures
test --test_output=errors
